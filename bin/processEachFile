#!/bin/bash
###############################################################################
##
# FILE:		pipethrough
# PRODUCT:	pipes
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	01-Jan-2004
#
###############################################################################
# CONTENTS:
#   Pass FILEs individually through external COMMAND and write output back into
#   the same file.
#
# REMARKS:
#
# @(#)pipethrough	$Id$	pipes
###############################################################################

: ${PROCESSEACHFILE_EXEC_END=;}
: ${PROCESSEACHFILE_FILE_WHAT=file}
: ${PIPETHROUGH_FILE_MARKER='{}'}
fileMarker="$PIPETHROUGH_FILE_MARKER"; unset PIPETHROUGH_FILE_MARKER

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

printShortUsage()
{
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[-v|--verbose]' "${hasProgressNotification:+ [--progress SINK]}" '[--delta-via backup|copy|fileAge|fileSize|cksum|sha256sum] [-b|--backup EXT|--backup-command writeorig|writebackup|writeOrigOrBackup] [--diff [--diff-cmd CMD] [--diff-options OPT]] [--abort-unless-change|--abort-on-change] [--message-on-change MSG] [--message-on-success MSG] [--message-on-failure MSG] [--message-on-abort MSG] [--message-subject SUBJECT [--warn-on-change|--warn-unless-change]] [-?|-h|--help] ...'
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] -c|--command \"COMMANDLINE [${fileMarker}] ...\" [-c ...] FILE [...]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] --exec SIMPLECOMMAND [${fileMarker}] [ARGUMENTS ...] $PROCESSEACHFILE_EXEC_END [--exec ...] FILE [...]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] -- SIMPLECOMMAND [${fileMarker}] [ARGUMENTS ...] -- FILE [...]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] -n|--command-arguments N SIMPLECOMMAND [${fileMarker}] [ARGUMENTS ...] FILE [...]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    cat <<HELPDESCRIPTION
Passes FILEs individually to COMMAND(s) (by passing FILE as the last
command-line argument${fileMarker:+, or replacing any $fileMarker marker inside COMMAND}),
assuming it writes the output back into the same FILE (i.e. performs an in-place
update).
COMMAND (and its ARGUMENTS) can be specified in various ways: As one quoted
argument with -c|--command, arguments after --exec until a '${PROCESSEACHFILE_EXEC_END}', separated by
special arguments --, or (especially useful in scripts when you know the
\${#ARGS[@]} but cannot influence the contents) by number of arguments.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --verbose|-v	    Show each executed command on stderr.${hasProgressNotification:+
    --progress SINK	    Report the current FILE through one of the SINKs of
			    the progressNotification command.}
    --delta-via backup|copy|fileAge|fileSize|cksum|sha256sum
			    Determine whether the file has changed through the
			    passed algorithm. This can be any command that takes
			    the FILE as its argument and prints a single-word
			    digest (further output is ignored).
    --backup|-b EXT	    Create a backup of the original file with file
			    extension EXT.
    --backup-command writeorig|writebackup|writeOrigOrBackup
			    Use the supplied backup program for backup.
			    The program should print the backup filespec to
			    stdout.
    --diff		    Also show differences done by COMMAND. This requires
			    a change detection that keeps the entire original
			    file: backup|copy
    --diff-cmd CMD	    Use CMD as the diff command.
    --diff-options OPT	    Options passed to diff; default -u (unified diff).
    --abort-unless-change   Do not process further FILEs if COMMAND didn't
			    change the current FILE.
    --abort-on-change	    Do not process further FILEs if COMMAND changed the
			    current FILE.
    --message-on-change MSG Print MSG to stderr if COMMAND changed the FILE.
    --message-on-success MSG
			    Print MSG to stderr if COMMAND succeeds. If
			    --message-on-change is also given, this will be the
			    warning that no change happened.
    --message-on-failure MSG
			    Print MSG to stderr if COMMAND fails.
    --message-on-abort MSG  Print MSG to stderr if processing was aborted
			    (--abort-on-change, --abort-unless-change).
    The current FILE can be embedded in any message via %q.
    --message-subject SUBJECT
			    Print a status message (change, success, failure,
			    abort) to stderr. Basically all of the
			    --message-on-... options in one. Individual messages
			    can still be overridden via the --message-on-...
			    parameters.
    --warn-on-change	    Modifies the status messages synthesized by
			    --message-subject so that on change it will be a
			    warning message instead of an informational one.
    --warn-unless-change    Modifies the status messages synthesized by
			    --message-subject so that on success (without
			    change) it will be a warning message instead of an
			    informational one.
    --command|-c CMD	    Execute CMD as a command-line. Each FILE ${fileMarker:+either }is
			    appended${fileMarker:+ or replaces any $fileMarker marker} inside
			    COMMANDLINE.
    --exec COMMAND ... $PROCESSEACHFILE_EXEC_END    Execute COMMAND; all following arguments are taken
			    to be arguments to the COMMAND until an argument
			    consisting of '${PROCESSEACHFILE_EXEC_END}' is encountered. Each FILE ${fileMarker:+either}
			    is appended${fileMarker:+ or replaces any $fileMarker marker} inside
			    COMMANDLINE.
    --command-arguments|-n N
			    The COMMAND [ARGUMENTS ...] consists of N arguments;
			    start accepting FILEs after that.

SEE ALSO:
- eachFile also executes COMMAND on each FILE individually, but isn't concerned
  with what happens to the FILE. Instead, it offers header and prompt
  embellishments, and can summarize the amount of failures.

EXIT STATUS:
    0	if it succeeds
    123	if any invocation of the COMMAND exited with status 1-125
    124	if the COMMAND exited with status 255
    1	if the processing was aborted (--abort-on-change, --abort-unless-change)
    2	if it was invoked in a wrong way, e.g. missing FILEs
    3	Internal error or failed assertion.
HELPTEXT
}

isNeedEval=
typeset -a commands=()
typeset -a simpleCommand=()
action=:
check=:
delta=copy
abortOn=
backupExtension=
backupCommand=
backupFilespec=
copyFilespec=
copyDigest=
commandArgumentNum=
diffCommand=diff; [ -t 1 ] && type -t colordiff >/dev/null && diffCommand=colordiff # Highlight diff output if available.
diffOptions=-u
commandJoiner=';'
isVerbose=
progressSink=
warnOn=
unset messageOnChange
unset messageOnSuccess
unset messageOnFailure
unset messageOnAbort
messageSubject=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=(${commands:+$commandJoiner} "$1"); isNeedEval=t; shift;;
	--exec)		shift
			cmd=
			printf -v escapedFileMarker %q "$fileMarker"
			while [ $# -gt 0 -a "$1" != "$PROCESSEACHFILE_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${PROCESSEACHFILE_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+=(${commands:+$commandJoiner} "$cmd")
			isNeedEval=t
			;;
	--verbose|-v)	shift; isVerbose=t;;
	--progress)	shift; progressSink="$1"; shift;;
	--backup|-b)	shift; backupExtension="${1:?}"; shift; backupCommand=backupToExtension; delta=backup;;
	--backup-command)
			shift; backupCommand="$1"; shift; delta=backup;;
	--delta-via)	shift; delta="${1:?}"; shift;;
	--diff)		shift; action=diffChanges;;
	--diff-options)		shift; diffOptions="$1"; shift;;
	--diff-cmd)		shift; diffCommand="$1"; shift;;
	--abort-unless-change)	shift
				if [ "$abortOn" = 1 ]; then
				    echo "ERROR: Cannot specify both --abort-unless-change and --abort-on-change at once!"
				    echo
				    printUsage "$0"
				    exit 2;
				fi >&2
				check=checkAbort
				abortOn=0
				;;
	--abort-on-change)	shift
				if [ "$abortOn" = 0 ]; then
				    echo "ERROR: Cannot specify both --abort-unless-change and --abort-on-change at once!"
				    echo
				    printUsage "$0"
				    exit 2;
				fi >&2
				check=checkAbort
				abortOn=1
				;;
	--message-on-change)	shift
				[ -n "$1" -a "$check" = ':' ] && check=checkChanges
				messageOnChange="$1"
				shift
				;;
	--message-on-success)		shift; messageOnSuccess="$1"; shift;;
	--message-on-failure)		shift; messageOnFailure="$1"; shift;;
	--message-on-abort)		shift; messageOnAbort="$1"; shift;;
	--message-subject)		shift; messageSubject="$1"; shift;;
	--warn-on-change)		shift; warnOn=1;;
	--warn-unless-change)		shift; warnOn=0;;
	--command-arguments|-n)	shift; commandArgumentNum="$1"; shift;;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
if [ -n "$messageSubject" ]; then
    if [ ! "${messageOnChange+t}" ]; then
	case "$warnOn" in
	    1)	messageOnChange="Warning: $messageSubject changed %q";;
	    *)	messageOnChange="$messageSubject changed %q";;
	esac
	[ "$check" = ':' ] && check=checkChanges
    fi
    case "$warnOn" in
	0)  if [ "$check" = ':' ]; then
		echo "ERROR: --warn-unless-change cannot be specified when change checking isn't enabled"
		echo
		printUsage "$0"
		exit 2
	    fi >&2
	    : ${messageOnSuccess="Warning: $messageSubject did not change %q"}
	    ;;
	*)  if [ "$check" = ':' ]; then
		: ${messageOnSuccess="Successfully performed $messageSubject on %q"}
	    else
		: ${messageOnSuccess="Successfully performed $messageSubject on %q without changing it"}
	    fi
	    ;;
    esac
    : ${messageOnFailure="ERROR: Failed to $messageSubject on %q"}
    case "$abortOn" in
	0)  : ${messageOnAbort="ERROR: Aborted because $messageSubject did not change %q"};;
	1)  : ${messageOnAbort="ERROR: Aborted because $messageSubject changed %q"};;
    esac
fi
if [ "$action" = ':' -a "$check" = ':' ]; then
    delta=''	# No need for change detection.
elif [ "$delta" = copy ]; then
    # Reuse a single temp file for each change detection.
    copyFilespec="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
    [ "${DEBUG:-}" ] || trap 'rm --force "$copyFilespec" 2>/dev/null' EXIT
fi

case "$1" in
    --)
	shift
	while [ $# -gt 0 -a "$1" != '--' ]
	do
	    simpleCommand+=("$1")
	    shift
	done
	if [ $# -eq 0 ]; then
	    echo 'ERROR: -- SIMPLECOMMAND [ARGUMENTS ...] must be concluded with --!'; echo; printUsage "$0"
	    exit 2
	fi >&2
	shift
	;;
    *)
	if [ -n "$commandArgumentNum" ]; then
	    for (( i = 0; i < commandArgumentNum; i++ ))
	    do
		simpleCommand+=("$1")
		shift
	    done
	fi
	;;
esac
if [ ${#simpleCommand[@]} -gt 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "${simpleCommand[@]}"
	quotedSimpleCommand="${quotedSimpleCommand% }"
	printf -v escapedFileMarker %q "$fileMarker"
	commands+=(${commands:+$commandJoiner} "${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
    else
	commands=("${simpleCommand[@]}")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] ${PROCESSEACHFILE_EXEC_END} or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
fi >&2



message()
{
    if [ -n "$1" ]; then
	printf "$1\\n" "$2"
    fi
}

getDigest()
{
    local filespec="${1:?}"; shift
    local digestOutput digest rest; digestOutput="$("$delta" "$filespec")" || return 3
    read -r digest rest <<<"$digestOutput"
    if [ -z "$digest" ]; then
	printf >&2 'ERROR: Empty digest from %s.\n' "$delta"
	return 3
    fi
    printf '%s\n' "$digest"
}

diffChanges()
{
    local copyFilespec="${1?}"; shift
    local copyDigest="${1?}"; shift
    local file="${1:?}"; shift
    eval "$diffCommand" "$diffOptions" '"$copyFilespec" "$file"'
    return 0	# Do not interpret differences as failure; we have the separate --abort-on-change and --abort-unless-change for that.
}
backupToExtension()
{
    local filespec="${1:?}"; shift
    cp --force --preserve "$filespec" "${filespec}${backupExtension:?}" && \
	printf '%s\n' "${filespec}${backupExtension}"
}

# The $check is done in a subprocess, so we need to send a signal to the main
# script in order to pass the information about whether a change has been done.
mainPID=$$
isChange=
onChangeReported()
{
    isChange=t
}
trap onChangeReported SIGUSR1
checkChanges()
{
    local copyFilespec="${1?}"; shift
    local copyDigest="${1?}"; shift
    local file="${1:?}"; shift

    case "$delta" in
	'') echo >&2 'ASSERT: $delta must not be empty when checking.'; exit 3;;
	copy|backup)
	    [ -e "$file" ] || file=/dev/null	# So that cmp has something to compare to.
	    cmp --silent "$copyFilespec" "$file";;
	*)
	    local updatedDigest
	    [ ! -e "$file" ] || updatedDigest="$(getDigest "$file")" || exit $?
	    [ "$updatedDigest" = "$copyDigest" ]
	    ;;
    esac
    case $? in
	2) exit 3;;	# cmp had trouble
	1) if [ -n "$messageOnChange" ]; then kill -SIGUSR1 "$mainPID"; fi;;
    esac
}
checkAbort()
{
    local copyFilespec="${1?}"; shift
    local copyDigest="${1?}"; shift
    local file="${1:?}"; shift
    [ -n "$abortOn" ] || return 0

    case "$delta" in
	'') echo >&2 'ASSERT: $delta must not be empty when checking.'; exit 3;;
	copy|backup)
	    [ -e "$file" ] || file=/dev/null	# So that cmp has something to compare to.
	    cmp --silent "$copyFilespec" "$file";;
	*)
	    local updatedDigest
	    [ ! -e "$file" ] || updatedDigest="$(getDigest "$file")" || exit $?
	    [ "$updatedDigest" = "$copyDigest" ]
	    ;;
    esac
    case $? in
	2) exit 3;;	# cmp had trouble
	1) if [ -n "$messageOnChange" ]; then kill -SIGUSR1 "$mainPID"; fi;;& # Fall-through here!
	$abortOn)
	    $action "$copyFilespec" "$copyDigest" "$file" || {
		case $? in
		    255)    message "$messageOnFailure" "$file"; exit 124;;	# special COMMAND exit has precedence over abort
		esac
	    }
	    message "$messageOnAbort" "$file"
	    exit 1  # signal abort
	    ;;
    esac
}



####D echo "**** $isNeedEval ${commands[0]}"; echo "**** ${commands[1]}"; echo "**** ${commands[2]}"; exit
if [ $# -eq 0 ]; then
    echo 'ERROR: No FILE(s) to process.'
    echo
    printUsage "$0"
    exit 2
fi >&2

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    exec 3> >(progressNotification --to "$progressSink" ${PROCESSEACHFILE_FILE_WHAT:+--prepend-count "${PROCESSEACHFILE_FILE_WHAT}"} --count-to $# 2>/dev/null)

    reportProgress()
    {
	trap 'reportProgress() { :; }; trap PIPE' PIPE
	printf '%s\n' "$*" >&3 2>/dev/null  # Silence "printf: write error: Broken pipe"
    }
else
    reportProgress() { :; }
fi

exitStatus=0
for file
do
    interpolatedFile="$file"; [ "$isNeedEval" ] && printf -v interpolatedFile '%q' "$file"
    typeset -a interpolatedCommands=("${commands[@]//"$fileMarker"/$interpolatedFile}")
    typeset -a f=("$interpolatedFile")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] || f=()

    if [ "$isVerbose" ]; then
	quoter='%q'; [ "$isNeedEval" ] && quoter='%s'
	printf -v verboseCommand "$quoter " "${interpolatedCommands[@]}" "${f[@]}"
	printf >&2 "%s\n" "${verboseCommand% }"
    fi

    if [ -e "$file" ]; then
	if [ -n "$backupCommand" ]; then
	    backupFilespec="$($backupCommand "$file")" || exit 3
	fi
	case "$delta" in
	    '') ;;
	    copy)
		cp --force --dereference -- "$file" "${copyFilespec:?}" || exit $?
		;;
	    backup)
		if [ -z "$backupFilespec" ]; then
		    if [ -n "$backupCommand" ]; then
			printf >&2 'ERROR: Did not get a backup filespec from %s.\n' "$backupCommand"
			exit 3
		    else
			printf >&2 'ERROR: Cannot use --delta-via backup without enabling backups.\n'
			exit 2
		    fi
		elif [ ! -e "$backupFilespec" ]; then
		    printf >&2 'ERROR: Backup does not exist: %s\n' "$backupFilespec"
		    exit 3
		fi >&2
		copyFilespec="$backupFilespec"
		;;
	    *)
		copyDigest="$(getDigest "$file")" || exit $?
		;;
	esac
    else
	copyFilespec=/dev/null
	copyDigest=''
    fi

    reportProgress "$file"
    isChange=
    if [ "$isNeedEval" ]; then
	eval "${interpolatedCommands[@]}" "${f[@]}"
    else
	"${interpolatedCommands[@]}" "${f[@]}"
    fi && \
	$check "$copyFilespec" "$copyDigest" "$file" && \
	$action "$copyFilespec" "$copyDigest" "$file" && \
	if [ "$isChange" ]; then message "$messageOnChange" "$file"; else message "$messageOnSuccess" "$file"; fi || \
	{
	    case $? in
		3)	exit 3;;
		255)    message "$messageOnFailure" "$file"; exit 124;;
		*)	message "$messageOnFailure" "$file"; exitStatus=123;;
	    esac
	}
done
exit $exitStatus
